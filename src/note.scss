
@import "base";

//variable
$primary-color:#1269b5;
div .box{
  background-color: $primary-color;
}
div .box1{
  background-color: $primary-color;
}

//nesting
.nav{
  height:100px;
  ul{
    margin:0;
    li{
      float:left;
      list-style:none;
      padding:5px;
      &:hover{
        background-color: #0d2f7e;
        color: #fff;
      }
    }
  }
  & &-text{
    font-size:15px;
  }
}

//attribute-nesting
body{
  font: {
    family:Helvetica, Arial, sans-serif;
    size:15px;
    weight:normal
  }
} 

//mixin
@mixin alert($text-color, $background){
  color: $text-color;
  background-color: $background;
  a {
    color:darken($text-color,10%)ï¼›
  }
}

.alert-warning{
  @include alert(#8a6d3b, #fcf8e3);
}

.alert-info{
  @include alert($text-color:#8a6d3b, $background:#fcf8e3)
}


//inheritance and extend
.alert{
  padding:15px;
}

.alert a{
  font-weight:bold;
}

.alert-info{
  @extend .alert;
  background-color: #d9edf7;
}

// 3comment methods

/*1. comment 
    *comment*/
//2. comment
/*! 3. comment*/


//Number
/*
  2+8 10
  2*8 16
  8/2 8/2
  (8/2) 4
  5px + 5px 10px
  5px -2 3px
  5px*2 10px
  5px *2px 10pxpx
  (10px/2) 5px
  (10px/5px) 2
  3 + 2*5px 13px
  abs(10) 10
  abs(10px) 10px
  abs(-10px) 10px
  round(3.5) 3
  round(3.2) 
  ceil(3.2)
  ceil(3.1)
  floor(3.6)
  percentage(650px /1000px) %65
  min(1,2,3) 1
  max(1,2,3) 3
*/

//String
/*
"ning" + "hao"  "ninghao"
"ning" + "hao" "ninghao"
ning/hao "ninghao"
ning *hao  error!
$greeting:"ninghao"
to-upper-case($greeting) "HELLOW NINGHAO"
str-length($greeting) 13
str-index($greeting) 1 from 1!
str-insert($greeting,".net",14) "Hellow ninghao.net" 
*/

//color

body{
  background-color:rgb(255,255,0)
}
body{
  background-color:rgba(255,255,0,0.5)
}
body{
  background-color:hsl(60,100%,50%)
}
body{
  background-color:hsla(60,100%,50%,0.5)
}
body{
  background-color:adjust-hue($color: #ff0000, $degrees: 137deg)
}

body{
  background-color:lighten( #ff0000, 30%)
}
body{
  background-color:darken( #ff0000, 30%)
}

body{
  background-color:saturate( #ff0000, 30%)
}
body{
  background-color:desaturate( #ff0000, 30%)
}
body{
  background-color:opacify( rgba(234,127,5,0.5), 0.3)
}
body{
  background-color:transparentize( #ba1350, 0.3)
}

//list
/*
length(5px 10px) 2
nth(5px 10px, 1) 5px
index(1px solid red, solid) 1
append(5px 10px,5px) (5px 10px 5px)
join(5px 10px 5px 0) (5px 10px 5px 0)
*/

//Map
/*
$colors:(light:#ffffff, dark:#000000)
length($colors) 2
map-get($colors,dark) #000000
map-keys($colors) ("light","dark")
map-values($colors) (#ffffff, #000000)
map-has-key($colors,"light") true
map-merge($colors,light-gray:#e5e5e5) (light:#ffffff, dark:#000000, gray:#e5e5e5)
map-remove($colors,light,dark)  (gray:#e5e5e5)
*/

//bool
/*
5px>3px true
*/

//interpolation
$name:"info";
$attr:"border";
.alert-#{$name}{
  #{$attr}-color:#ccc;
}

//@if

$theme:"dark";
body{
  @if $theme == "dark"{
    background-color: red;
  }@else if $theme == 'light'{
    background-color: white;
  } @else{
    background-color: green;
  }
}

//@for

$columns:4;
@for $i from 1 through 4{
  .col-#{$i}{
    width:100% / $columns *$i;
  }
}

//@each

$icons: success error warning;
@each $icon in $icons{
  .icon-#{$icon}{
    background-image: url(images/icons/#{$icon}.png);
  }
}

//@while
$i:6;
@while  $i > 0 {
  .item-#{$i}{
    width: 5px *$i;
  }
  $i: $i - 2;
}

//@function
$colors:(light:#ffffff, dark:#000000);

@function color($key){
  // @if not map-has-key($colors, $key){
    // @warn "couldn't find #{$key} in $colors"
    // @error "couldn't find #{$key} in $colors"
  // }
  @return map-get($colors, $key);
}

body{
  background-color: color(gray);
}

//placeholder
%button-style{
  font-size:14px;
}
.test{
  color:red;
}
.test1{
  @extend %button-style;
  color:red;
}




